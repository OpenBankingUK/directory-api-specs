openapi: 3.0.0
info:
  title: Open Banking Directory API
  version: 0.0.1
  description: OB Tech Directory API
paths:
  '/organisation/{OrganisationType}':
    post:
      summary: Enrol a eIDAS QWAC-bearing participant
      description: Enrol an eIDAS QWAC certificate-bearing participant onto the Open Banking Directory. Currenty only TPPs can use this enrolment endpoint, so please set `OrganisationType` to `tpp`
      tags:
        - Organisations
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
      requestBody:
        $ref: '#/components/requestBodies/Enrol'
      responses:
        '201':
          $ref: '#/components/responses/Enrol201CreatedResponse'
        '400':
          $ref: '#/components/responses/Enrol400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    get:
      summary: Get all organisations that the client is authorised to retrieve
      description: Note that this was not in the original design but is included to inform the client
      tags:
        - Organisations
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/OrganisationsGetFromSCIM200OKResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
  '/organisation/{OrganisationType}/{OrganisationId}':
    get:
      summary: Get the given organisation's details
      tags:
        - Organisations
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
        - $ref: '#/components/parameters/OrganisationId'
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/OrganisationGetFromSCIM200OKResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
  '/organisation/{OrganisationType}/{OrganisationId}/contact/{ContactType}':
    put:
      summary: Update the business or the technical contacts for the given organisation
      tags:
        - Contacts
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/ContactType'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      requestBody:
        $ref: '#/components/requestBodies/Contact'
      responses:
        '200':
          $ref: '#/components/responses/Contact200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    get:
      summary: Get the business or the technical contacts for the given organisation
      x-PingAccessResourceName: OrganisationContactGET
      x-PingAccessRuleType: uk.org.openbanking.policy.RequestHostOverride
      x-PingAccessRuleTarget: obdorgcontacts.{environment}
      tags:
        - Contacts
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/ContactType'
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/Contact200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'

  '/organisation/{OrganisationType}/{OrganisationId}/software-statement':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
    post:
      summary: Create a software statement
      tags:
        - Software Statements
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
        - $ref: '#/components/parameters/OrganisationId'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      requestBody:
        $ref: '#/components/requestBodies/SoftwareStatement'
      responses:
        '201':
          $ref: '#/components/responses/SoftwareStatement201CreatedResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    get:
      summary: Get all software statements for the given organisation
      tags:
        - Software Statements
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/SoftwareStatementsGet200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/SoftwareStatementId'
    get:
      summary: Get a software statement
      tags:
        - Software Statements
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/SoftwareStatement201CreatedResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    put:
      summary: Update a software statement
      tags:
        - Software Statements
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/SoftwareStatementId'
      requestBody:
        $ref: '#/components/requestBodies/SoftwareStatementState'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '200':
          $ref: '#/components/responses/SoftwareStatementUpdated200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/redirect-uri':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/SoftwareStatementId'
    post:
      summary: Add a redirect URI to the given Software Statement
      tags:
        - Software Statement Redirect URIs
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/SoftwareStatementId'
      requestBody:
        $ref: '#/components/requestBodies/SoftwareStatementRedirectURI'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '200':
          $ref: '#/components/responses/SoftwareStatementUpdated200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '409':
          $ref: '#/components/responses/409ConflictResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/software-statement-assertion':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/SoftwareStatementId'
    get:
      summary:
        Get a Software Statement Assertion for the given SoftwareStatementID.
      description: |
        The response body is a signed JWT and the values found in the header and the payload of the SSA are specified below

        # Terminology

          This specification uses the terms "access token", "authorization code", "authorization endpoint", "authorization grant", "authorization server", "client", "client identifier", "client secret", "grant type", "protected resource", "redirection URI", "refresh token", "resource owner", "resource server", "response type", and "token endpoint" defined by OAuth 2.0 [RFC6749] and uses the term "Claim" defined by JSON Web Token (JWT) [RFC7519].

          * __Account Servicing Payment Services Provider (ASPSP)__ -- An organisation managing customer accounts (and operating banking APIs).
          * __Primary Technical Contact__ -- The person at the TPP who creates an SSA and invokes a registration mechanism. This is an example of an [RFC7591] Client Developer.
          * __OB Organisation ID__ -- The unique identifier for each OpenBanking participant. Both TPPs and ASPSPs have OB Organisation IDs.
          * __OpenBanking Directory__ -- An implementation of a [PSD2] competent authority; acts as an Identity Provider, certificate authority, and registry governing the participants in the UK OpenBanking API scheme.
          * __ASPSP Registration Endpoint__ -- OAuth 2.0 & [RFC7591] compliant endpoint, exact value is discoverable from the [OIDCD] openid-configuration file of the ASPSP.
          * __Software Statement Assertion (SSA)__ -- An implementation of an [RFC7591] software statement, signed by the OpenBanking Directory.
          * __Trusted Third Party (TPP)__ -- An organization working to initiate payments or consume account information with/from an ASPSP.
          * __TPP Client Software__ -- software implementing an OAuth2 client, interacting with an ASPSP registration endpoint.

        # Software Statement Assertion (SSA)

          The SSA is a JSON Web Token (JWT) containing client metadata about an instance of TPP client software. The JWT is issued and signed by the OpenBanking Directory.

          A large number of claims that OpenID Connect OPs could support are detailed [https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata) and should be followed if not explicitly referenced below.

        ## SSA Payload

          The payload of an OpenBanking SSA MUST be a compliant software statement according to [RFC7591]. The SSA MUST also be a compliant JWT according to [RFC7519]. The following metadata profiles the metadata in [RFC7591] and [RFC7519]:

          | Metadata | Description | Source Specification |
          |----------|-------------|----------------------|
          |`software_id`|Unique Identifier for TPP Client Software|[RFC7591]|
          |`iss`|SSA Issuer|[RFC7519]|
          |`iat`|Time SSA issued|[RFC7519]|
          |`jti`|JWT ID|[RFC7519]|

          The following software metadata is additionally defined for this profile:

          |Metadata |Description |Default values |
          |---------|------------|---------------|
          |`software_client_id`|The Client ID Registered at OB used to access OB resources| |
          |`software_client_description`|Human-readable detailed description of the client| |
          |`software_client_name`|Human-readable Software Name| |
          |`software_client_uri`|The website or resource root uri| |
          |`software_version`|The version number of the software should a TPP choose to register and / or maintain it  | |
          |`software_environment`|Requested additional field to avoid certificate check| |
          |`software_jwks_endpoint`|Contains all active signing and network certs for the software| |
          |`software_jwks_revoked_endpoint`|Contains all revoked signing and network certs for the software| |
          |`software_logo_uri`|Link to the TPP logo. Note, ASPSPs are not obliged to display images hosted by third parties| |
          |`software_mode`|ASPSP Requested additional field to indicate that this software is "Test" or "Live" the default is "Live". Impact and support for "Test" software is up to the ASPSP.| |
          |`software_on_behalf_of_org`|A reference to fourth party organsiation resource on the OB Directory if the registering TPP is acting on behalf of another.| |
          |`software_on_behalf_of_org_type`|The type of organisaion that this software has a relationship with. Regulated on OB Directory, Not regulated, Regulated not On OB Directory| |
          |`software_policy_uri`|A link to the software's policy page| |
          |`software_redirect_uris`|Registered client callback endpoints as registered with Open Banking| |
          |`software_roles`|A multi value list of PSD2 roles that this software is authorized to perform.| |
          |`software_tos_uri`|A link to the software's terms of service page| |

          The following Organisational metadata is defined for this profile:

          |Metadata |Description |Default values |
          |---------|------------|---------------|
          |`organisation_competent_authority_claims`|Authorisations granted to the organsiation by an NCA| |
          |`org_status`|Included to cater for voluntary withdrawal from OB scenarios|`Active`, `Revoked` or `Withdrawn`|
          |`org_id`|The Unique TPP or ASPSP ID held by OpenBanking.| |
          |`org_name`|Legal Entity Identifier or other known organisation name| |
          |`org_contacts`|JSON array of objects containing a triplet of name, email, and phone number| |
          |`org_jwks_endpoint`|Contains all active signing and network certs for the organisation| |
          |`org_jwks_revoked_endpoint`|Contains all revoked signing and network certs for the organisation| |
          |`ob_registry_tos`|A link to the OB registries terms of service page| |

        ## SSA header

          The SSA header MUST comply with [RFC7519].

          |Metadata |Description |Comments |
          |---------|------------|---------|
          |`typ`|MUST be set to `JWT`| |
          |`alg`|MUST be set to `ES256` or `PS256`| |
          |`kid`|The kid will be kept the same as the `x5t` parameter. (X.509 Certificate SHA-1 Thumbprint) of the signing certificate.| |

          ### Example SSA

          The elements defined in the software statement will consist of the following values.

          *Note that there are inconsistent applications of booleans or "Active" strings in the current data model.*

          *Note that there are inconsistent applications of status flags case sensitivity.*

          *The attributes required to be displayed by ASPSPs.*

        ```
        {
          "typ": "JWT",
          "alg": "ES256",
          "kid": "ABCD1234"
        }
        {
          "iss": "OpenBanking Ltd",
          "iat": 1492756331,
          "jti": "id12345685439487678",
          "software_environment": "production",
          "software_mode": "live",
          "software_id": "65d1f27c-4aea-4549-9c21-60e495a7a86f",
          "software_client_id": "OpenBanking TPP Client Unique ID",
          "software_client_name": "Amazon Prime Movies",
          "software_client_description": "Amazon Prime Movies is a moving streaming service",
          "software_version": "2.2",
          "software_client_uri": "https://prime.amazon.com",
          "software_redirect_uris": [
            "https://prime.amazon.com/cb",
            "https://prime.amazon.co.uk/cb"
          ],
          "software_roles": [
            "PISP",
            "AISP"
          ],
          "organisation_competent_authority_claims": [
            {
              "authority_id": "FMA", // Austrian Financial Market Authority
              "registration_id": "111111",
              "status": "Active",
              "authorisations":  [
                {
                    "member_state": "GBR",
                        "roles": [
                            "PISP",
                            "AISP"
                        ]
                },
                {
                    "member_state": "ROI",
                        "roles": [
                            "PISP"
                        ]
                }
              ]
            }
          ],
          "software_logo_uri": "https://prime.amazon.com/logo.png",
          "org_status": "Active",
          "org_id": "Amazon TPPID",
          "org_name": "OpenBanking TPP Registered Name",
          "org_contacts": [
            {
              "name": "contact name",
              "email": "contact@contact.com",
              "phone": "+447890130558"
              "type": "business"
            },
            {
              "name": "contact name",
              "email": "contact@contact.com",
              "phone": "+447890130558",
              "type": "technical"
            }
          ],
          "org_jwks_endpoint": "https://jwks.openbanking.org.uk/org_id/org_id.jkws",
          "org_jwks_revoked_endpoint": "https://jwks.openbanking.org.uk/org_id/revoked/org_id.jkws",
          "software_jwks_endpoint": "https://jwks.openbanking.org.uk/org_id/software_id.jkws",
          "software_jwks_revoked_endpoint": "https://jwks.openbanking.org.uk/org_id/revoked/software_id.jkws",
          "software_policy_uri": "https://tpp.com/policy.html",
          "software_tos_uri": "https://tpp.com/tos.html",
          "software_on_behalf_of_org": "https://api.openbanking.org.uk/scim2/OBTrustedPaymentParty/1234567789",
        }
        {
          Signature
        }
        ```

        # Automated Client Registration

        A TPP MAY use automated client registration to submit an SSA to an ASPSP in exchange for client credentials for use as a client against an OAuth 2.0 Authorization Server. It is RECOMMENDED for ASPSPs to support the automated client registration mechanism.

        ASPSPs MUST NOT accept client registration requests that do not contain a valid SSA. Requests that pass validation criteria SHOULD result in the ASPSP populating client security characteristics from the metadata within the SSA and client registration requests issuing a registration response.

        To support onboarding through APIs, the ASPSP must provide:

        * A service to validate and process the Request JWT and the SSA JWT contained within supporting both PS256 and ES256 alg types
        * A service to create and return client credentials based on the security characteristics obtained from the metadata
        * Storing the the Software Statement ID from the SSA against the client and validating the TPP, App, and SSID.org_jwks_endpoint
        * Provide a discovery specification endpoint that conforms to the OIDC discovery specification advertising supported mechanisms and algorithims available to TPPs. [https://openid.net/specs/openid-connect-discovery-1_0.html](https://openid.net/specs/openid-connect-discovery-1_0.html)

        The TPP must only present the SSA to an ASPSP over a mutually authenticated TLS channel using a certificate issued by the OB. In this case, the combination of possession of the SSA, the possession of private keys referenced in the SSA and ability to present it over a channel that can be validated as belonging to the same TPP organization, is a strong barrier for attackers. Unlike RFC7591 the client registration request will be of type JWT where the registration request itself is a signed jwt.

        ### Client Registration Endpoint

        If an ASPSP supports automated client registration, the ASPSP MUST operate an [RFC7591] compliant registration endpoint.

        * The client registration endpoint MUST be protected by transport-layer security (TLS 1.2 or better)
        * The transport layer MUST be mutually authenticated using certificates chaining to the OpenBanking certificate authority. *The ASPSP registration endpoint MUST accept HTTP POST messages with request parameters encoded in the entity body using the `application/jwt` content-type.
        * The ASPSP registration endpoint SHOULD accept registration attempts from any mutually authenticated channel whose certificate chains to the OpenBanking certificate authority and is not revoked.

        ## Request Validation

        Prior to issuing a client registration response, the ASPSP MUST perform the following checks:

        * The ASPSP SHOULD check whether the TPP that initiated the TLS connection is the same TPP as listed in the SSA.
        * In the case where a gateway or other piece of infrastructure pre-terminates the MATLS channel in front of the registration endpoint, the certificate used to initiate the connection or some part of that certificate (such as DN & Issuer) SHOULD be made available to the ASPSP for validation against the claims in the SSA.
        * The registration request MUST be signed with a key contained in the JWKS referenced in the SSA included with the request. This ensures that a holder-of-key proof-of-possession is performed proving that the TPP app was the originally intended recipient of the SSA when the OB issued it.
        * The SSA MUST be validated according to [RFC7519], including validation of the signature and validity window.

        JWT signature must be validated, this involves retrieving the jwks keyset for both the OB and the TPP. The OB keystore location will be published as part of the directory specification, The TPP's will be included in the software statement.

        * SSA Lifetime
        * The SSA's Lifetime will be short, typically less than 10 minutes. TPPs will be able to retrieve SSAs from OB using client_credentials grant so there should be no need for a SSA to be long lived.

        ### Supported extensions to RFC7591

        Section for the support sections / profile enhancements on RFC7591 e.g OIDC client reg profile, reg profile enhancments for mtls token end point auth

        ## Client Registration Request

        To register as a client at an ASPSP, the TPP sends an HTTP POST to the ASPSP registration endpoint.

        * The request MUST be presented in the format of a [RFC7519] compliant JWT.
        * The request MUST use the HTTP POST method, using the application/jwt method.
        * The JWT MUST be signed using algorithms specified in [FAPI-RW] Section 8.6.

        ### Request Claims

        The client registration request MUST contain the following claims in the JWT payload unless designated as Optional. The TPP MAY add additional claims to the JWT payload. The ASPSP MAY ignore claims not in the chart below. If a claim name matches a specified claim in any of [RFC7519], [RFC7591], or [FAPI], the usage must also match the specification.

        |Claim|Description|Source Specification|Optional|Comments|
        |-----|-----------|--------------------|--------|--------|
        |`iss`|Request Issuer (The TPP)|[RFC7519]|NO| |
        |`iat`|Time of issuance of request|[RFC7519]|NO| |
        |`exp`|Request Expiration time|[RFC7519]|NO| |
        |`jti`|JWT ID|[RFC7519]|NO| |
        |`redirect_uris`|Registered URIs the TPP will use to interact with the ASPSP AS|[OIDC-R]|NO|MUST match or be a subset of the software_redirect_uris claim in the SSA|
        |`token_endpoint_auth_method`|Specifies which token endpoint authentication method the TPP wants to use|[RFC7591]|NO|  private_key_jwt - if requested the OP should extract the TPPs JWKS location from the software statement assertion included.|
        |`grant_types`|A JSON array specifying what the TPP can request to be supplied to the token endpoint as exchange for an access token|[RFC7591]|NO| |
        |`response_types`|A JSON array specifying what the TPP can request to be returned from the ASPSP authorisation endpoint.|[RFC7591]|YES|ASPSPs MAY reject anything other than `code`|
        |`software_id`|OB Organisation ID|[RFC7591]|YES|If specified, the software_id in the request MUST match the software_id specified in the SSA. ASPSPs can choose to allow multiple registrations for a given software client name and may take the software_id from either the SSA or the TPP as a hint only.|
        |`scope`|scopes the client is asking for (if not specified, default scopes are assigned by the AS)|[RFC7591]|YES|Minimum scope should be openid + whatever scopes are appropriate for the softwares PSD2 Role.|
        |`software_statement`|SSA issued by OpenBanking identifier|[RFC7519]  |NO| |
        |`application_type`|`web` or `mobile`|[OIDC-R]|NO|MUST be `web` if specified.|
        |`id_token_signed_response_alg`|Algorithm which the TPP expects to sign the id_token, if an id_token is returned.|[OIDC-R]|NO|Supported values MUST comply with [FAPI-RW] Section 8.6.|
        |`request_object_signing_alg`|Algorithm which the TPP expects to sign the request object if a request object will be part of the authorization request sent to the ASPSP.|[OIDC-R]|NO|Supported values MUST comply with [FAPI-RW] Section 8.6.|

        ## SUPPORTED TOKEN ENDPOINT AUTHENTICATION METHODS

        The TPP MUST choose one of the following token endpoint authentication methods:

        * __Private Key JWT Authentication__ A TPP choosing to use the `private_key_jwt` method to authenticate to the token endpoint MUST set the value of the `token_endpoint_auth_method` to `private_key_jwt` as specified by [OIDC] Section 9, and [RFC7523].
        * __Mutual TLS Client Authentication__ A TPP choosing to register Mutual TLS as the client authentication method MUST set the following client metadata in the registration request`token_endpoint_auth_method` MUST be set to `tls_client_auth` The client metadata parameter `tls_client_auth_dn` MUST be included in the registration request * The content of the `tls_client_auth_dn` claim MUST contain the DN of the certificate that the TPP will present to the ASPSP token endpoint.
        * __HTTP Basic Client Authentication__ A TPP choosing to use HTTP Basic Authentication method MUST set the `token_endpoint_auth_method` claim in the registration request to client_secret_basic as per [rfc6749] section 2.3.1.
        * __HTTP POST Client Authentication__ A TPP choosing to use HTTP Basic Authentication method MUST set the `token_endpoint_auth_method` claim in the registration request to `client_secret_post` as per [rfc6749] section 2.3.1.

        ## SUPPORTED GRANT TYPES

        The TPP MUST specify one or more of the following values in the `grant_types` claim. Values MUST be encoded as a JSON array. ASPSPs MAY reject anything other than `client_credentials` or `authorization_code`.

        * `authorization_code`
        * `refresh_token`
        * `client_credentials`

        ## SUPPORTED RESPONSE TYPES

        A TPP MAY specify response_types in the request. Values MUST be encoded as a JSON array. In the case this value is omitted, and any grant type that utilizes the authorisation endpoint is also specified, the default `response_types` array contains the single value of code. ASPSPs SHOULD support code `id_token` and MAY support code. Supported response_types include: `code` code `id_token`

        ## Supported Request URIs

        The TPP MAY specify a JSON array of [RFC3986] compliant redirect URIs in the request using the `redirect_uris` metadata element. Every value in the `redirect_uris` JSON array MUST adhere to the following rules:

        * The URI MUST use the `https` scheme
        * The URI MUST NOT contain a host with a value of `localhost`
        * The URI MUST exactly match a URI within the `software_redirect_uris` element of the SSA as described in Section 6.2.1 of [RFC3986] (Simple String Comparison). If the `request_uris` metadata element is omitted from the request, the entire contents of the `software_redirect_uris` element in the SSA are considered to be requested by the TPP.

        Example Request

        ```
        POST /register HTTP/1.1
        Content-Type: application/jwt
        Accept: application/json
        Host: auth.bankone.com

        eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJREFtYXpvbiIsImlhdCI6MTQ5OTgwNTg0OCwiZXhwIjoxNTMxMzQxODQ4LCJhdWQiOiJodHRwczovL2F1dGhuLmxsb3lkc2JhbmsuY29tIiwic3ViIjoiaHR0cHM6Ly9hdXRobi5sbG95ZHNiYW5rLmNvbSIsImNsaWVudF9pZCI6IklEQW1hem9uMSIsInNvZnR3YXJlX3N0YXRlbWVudCI6ImV5SjBlWEFpT2lKS1YxUWlMQ0poYkdjaU9pSklVekkxTmlKOS5leUpwYzNNaU9pSlBjR1Z1UW1GdWEybHVaeUlzSW1saGRDSTZNVFE1T1Rnd05UZzBPQ3dpWlhod0lqb3hOVE14TXpReE9EUTRMQ0poZFdRaU9pSkZlR0Z0Y0d4bElGUlFVQ0lzSW5OMVlpSTZJa1Y0WVcxd2JHVWdWRkJRSWl3aVQySlVVRkJKWkNJNklrbEVRVzFoZW05dUlpd2lUMkpVVUZCU2IyeGxJam9pVUVsVFVDSjkuUnJydEpYbmZmSzVjOHJJeEczUm93QXNRZWNlSDNvWlFXTWJwZ0hENzhPOCJ9.VRckIjwgB9ahNTPK6GcDzCfqbU9mkvoOu-B_2jHdKzs

        ```

        Example Decoded Registration Request (Non Normative JWT decoded For Illustration)

        ```
        POST /register HTTP/1.1
        Content-Type: application/jwt
        Accept: application/json
        Host: authn.lloyds.co.uk
        {
          "typ": "JWT",
          "alg": "ES256",
          "kid": "ABCD1234"
        }
        {
          "iss": "Amazon TPPID",
          "iat": 1492760444,
          "exp": 1524296444,
          "aud": "https://authn.lloyds.co.uk",
          "scope": "openid makepayment",
          "token_endpoint_auth_method": "private_key_jwt",
          "grant_types": ["authorization_code", "refresh_token", "client_credentials"],
          "response_types": ["code"],
          "id_token_signed_response_alg": "ES256",
          "request_object_signing_alg": "ES256",
          "software_id": "65d1f27c-4aea-4549-9c21-60e495a7a86f",
          "software_statement": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJPcGVuQmFua2luZyBMdGQiLCJpYXQiOjE0OTI3NTYzMzEsImV4cCI6MTQ5Mjc1NzU1MCwiYXVkIjoiT3BlbkJhbmtpbmcgVFBQIFVuaXF1ZSBJRCIsInN1YiI6Ik9wZW5CYW5raW5nIFRQUCBTb2Z0d2FyZSBVbmlxdWUgSUQiLCJjbGllbnRfbmFtZSI6IkFtYXpvbiBQcmltZSBMdGQiLCJjbGllbnRfdXJpIjoiaHR0cHM6Ly9wcmltZS5hbWF6b24uY29tIiwidHBwX3NvZnR3YXJlX2lkIjoiT3BlbkJhbmtpbmcgVFBQIFNvZnR3YXJlIFVuaXF1ZSBJRCIsInRwcF9zb2Z0d2FyZV9yb2xlcyI6WyJQSVNQIiwiQUlTUCJdLCJ0cHBfcm9sZXMiOlsiUElTUCIsIkFJU1AiLCJQSUlTUCJdLCJ0cHBfaWQiOiJPcGVuQmFua2luZyBUUFAgVW5pcXVlIElEIiwidHBwX25hbWUiOiJPcGVuQmFua2luZyBUUFAgUmVnaXN0ZXJlZCBOYW1lIiwidHBwX2NvbXBldGVudF9hdXRob3JpdHkiOiJPcGVuQmFua2luZyBUUFAgUmVnaXN0ZXJlZCBDb21wZXRlbnQgQXV0aG9yaXR5IiwidHBwX2NvbXBldGVudF9hdXRob3JpdHlfaWQiOiJPcGVuQmFua2luZyBUUFAgUmVnaXN0ZXJlZCBBdXRob3JpdHkgSUQiLCJ0cHBfcHRjX25hbWUiOiJPcGVuQmFua2luZyBUUFAgUmVnaXN0ZXJlZCBQcmltYXJ5IFRlY2huaWNhbCBDb250YWN0IE5hbWUiLCJ0cHBfcHRjX2VtYWlsIjoiT3BlbkJhbmtpbmcgVFBQIFJlZ2lzdGVyZWQgUHJpbWFyeSBUZWNobmljYWwgQ29udGFjdCBFbWFpbCIsInRwcF9qd2tzX2VuZHBvaW50IjoiaHR0cHM6Ly9qd2tzLm9wZW5iYW5raW5nLm9yZy51ay90cHBfaWQuamt3cyJ9.dtWXOW7uAc-jM_-wZNyNvN3dkgd4yV6KkdS_6rbNRUBD15_rWO1FARF7WcjFmSvlZZrT-njf9CmJKbhl7DuXIw"
        }
        {
          Signature
        }
        ```

        Some client metadata may be communicated via the software statement (which is embedded in the onboarding request), other metadata could be directly asserted by the TPP as part of the onboarding request. Note that additional metadata values are defined in both RC7591 and in the [http://openid.net/specs/openid-connect-registration-1_0-29.html#IANA specification](http://openid.net/specs/openid-connect-registration-1_0-29.html#IANA) specification.

        * OPs MAY NOT support optional values listed below that are asserted by the TPP.
        * OPs MAY NOT adopt values asserted by the TPP that are also contained in the software statement
        * OPs SHALL reject requests if the requested configuration is not supported by the OP. e.g token_endpoint_auth_method requested should match one listed on the well-known configuration endpoint.

        ### Registration Request Validation

        An ASPSP MUST return an error response if any of the following requirements are not met:

        * The registration request assertion MUST contain a software statement attribute as client metadata.
        * The signature of the software statement assertion MUST validate against the OpenBanking JWKS or JWKS URI distributed and validated out of band of the current registration request
        * The signature of the registration request assertion MUST successfully validate against the JWKS URI specified in the `software_jwks_endpoint` attribute of the software statement assertion (SSA).
        * If the request assertion specifies a `redirect_uris` metadata element, the array contents MUST match or be a subset of the `software_redirect_uris` claim in the SSA.
        * If the request assertion specifies a `software_id` metadata element, that value MUST match the `software_id` element in the SSA.

        ### Certificate Based TLS Validation

        As described in [RFC7515] section 4.1.4 all OpenBanking Ltd ecosystem certificates will be issued as X.509 certificates that can be uniquely identified in a JWKS key store by the keyid. The format of the keyid will be aligned to the `x5t` parameter of the certificate from which the key is extracted as documented in [RFC7515] section 4.1.8.

        An ASPSP MUST return an error response if any of the following requirements are not met:

        * The transport layer negotiated by the TPP MUST be mutually authenticated.
        * The client TLS certificate SHOULD chain to a certificate located in the SSA `org_jwks_endpoint` attribute.
        * The client TLS certificate must contain the following attributes:

            * The Subject DN MUST contain the commonName (CN) attribute and organisationUnit (OU) of the certificate.
            * The CN attribute of the certificate MUST match the software_id specified within the SSA.
            * The OU attribute of the certificate MUST match the org_id specified within the SSA.

        * The Issuer DN MUST be validated ensuring that the issuer was the appropriate Open Banking CA for the environment.

        ### Client Registration Response

        At the time that the ASPSP finishes evaluation of the request, the ASPSP MUST return a client registration response to the TPP that reflects the final ASPSP client onboarding decision.

        ### Successful Client Registration Response

        In the case where the ASPSP makes a positive determination and creates a client, a Client Information Response MUST be returned to the the TPP conforming to Section 3.2.1 of [RFC7591]. The parameters returned in the response will vary depending on which token endpoint authentication method was specified in the request.

        EXAMPLE CLIENT REGISTRATION RESPONSE

        ```
        HTTP/1.1 201 Created
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {
          "client_id": "dc-xliXMnoy6LN7Rh2Zu0fZan",
          "client_name": "Amazon Inc: Amazon Prime Movies Oct 23 2017"
          "logo_uri": "https://prime.amazon.com/logo.png"
          "redirect_uris":
          [
            "https://prime.amazon.com/cb",
            "https://prime.amazon.co.uk/cb"
          ],
          "id_token_signed_response_alg": "ES256",
          "request_object_signing_alg": "ES256",
          "grant_types": ["authorization_code", "refresh_token"],
          "software_id": "65d1f27c-4aea-4549-9c21-60e495a7a86f",
          "software_logo_uri": "https://prime.amazon.com/logo.png"
          "software_client_name": "Amazon Prime Movies",
          "software_client_name#ja-Jpan-JP": "\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u540D",
          "software_roles": [
             "PISP",
             "AISP"
          ],
          "scope": "openid makepayment",
          "token_endpoint_auth_method": "private_key_jwt",
          "software_jwks_endpoint": "https://jwks.openbanking.org.uk/org_id/software_id.jkws"
        }
        ```

        ### Unsuccessful Client Registration Response

        In the case where the ASPSP makes a negative determination and refuses to create a client, the ASPSP MUST return a client registration error response to the TPP conforming to Section 3.2.2 of [RFC7591].

        EXAMPLE CLIENT REGISTRATION ERROR RESPONSE

        ```
        HTTP/1.1 400 Bad Request
        Content-Type: application/json
        Cache-Control: no-store
        Pragma: no-cache

        {
          "error": "unapproved_software_statement",
          "error_description": "Some actionable reason why an ASPSP might reject a valid SSA"
        }
        ```

        ## References

        ### Normative References

        [FAPI] "Financial API - Part 1: Read Only API Security Profile" [http://openid.net/specs/openid-financial-api-part-1.html](http://openid.net/specs/openid-financial-api-part-1.html)

        [FAPI-RW] "Financial API - Part 2: Read and Write API Security Profile" [http://openid.net/specs/openid-financial-api-part-2.html](http://openid.net/specs/openid-financial-api-part-2.html)

        [OBUK-SEC] "UK Open Banking OIDC Security Profile" [https://bitbucket.org/openid/obuk/src/20890560b96ae5df11349a5551ec6ae040a632d9/uk-openbanking-security-profile.md](https://bitbucket.org/openid/obuk/src/20890560b96ae5df11349a5551ec6ae040a632d9/uk-openbanking-security-profile.md)

        [OIDC] "OpenID Connect Core 1.0 incorporating errata set 1" [http://openid.net/specs/openid-connect-core-1_0.html](http://openid.net/specs/openid-connect-core-1_0.html)

        [OIDC-D] "OpenID Connect Discovery 1.0 incorporating errata set 1" [http://openid.net/specs/openid-connect-discovery-1_0.html](http://openid.net/specs/openid-connect-discovery-1_0.html)

        [OIDC-R] "OpenID Connect Dynamic Client Registration 1.0 incorporating errata set 1" [https://openid.net/specs/openid-connect-registration-1_0.html](https://openid.net/specs/openid-connect-registration-1_0.html)

        [MTLS-ID3] "Mutual TLS Profile for OAuth 2.0 (Draft)" [https://tools.ietf.org/html/draft-ietf-oauth-mtls-03](https://tools.ietf.org/html/draft-ietf-oauth-mtls-03)

        [RFC3986] "Uniform Resource Identifier (URI): Generic Syntax" [https://tools.ietf.org/html/rfc3986](https://tools.ietf.org/html/rfc3986)

        [RFC7515] "JSON Web Signature (JWS)" [https://tools.ietf.org/html/rfc7515](https://tools.ietf.org/html/rfc7515)

        [RFC7519] "JSON Web Token (JWT)" [http://www.rfc-editor.org/info/rfc7519](http://www.rfc-editor.org/info/rfc7519)

        [RFC7523] "JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants" [https://tools.ietf.org/html/rfc7523](https://tools.ietf.org/html/rfc7523)

        [RFC7591] "OAuth 2.0 Dynamic Client Registration Protocol", [https://tools.ietf.org/html/rfc7591](https://tools.ietf.org/html/rfc7591)

        [RFC6749] "The OAuth 2.0 Authorization Framework", [http://www.rfc-editor.org/info/rfc6749](http://www.rfc-editor.org/info/rfc6749)

        [RFC6750] "The OAuth 2.0 Authorization Framework: Bearer Token Usage" [http://www.rfc-editor.org/info/rfc6750]()http://www.rfc-editor.org/info/rfc6750)

        [SAML2] "Assertions and Protocols for the OASIS Security Assertion Markup Language (SAML) 2.0" [https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf](https://docs.oasis-open.org/security/saml/v2.0/saml-core-2.0-os.pdf)

        ### Informative References

        [PSD2] "Payment Services Directive 2" [https://publications.europa.eu/en/publication-detail/-/publication/dd85ef2e-a953-11e5-b528-01aa75ed71a1](https://publications.europa.eu/en/publication-detail/-/publication/dd85ef2e-a953-11e5-b528-01aa75ed71a1)

      tags:
        - Software Statement Assertions
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/SoftwareStatementAssertion200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'

  '/organisation/{OrganisationType}/{OrganisationId}/certificate':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/SoftwareStatementId'
    get:
      summary: Get the certificates for the given organisation
      tags:
        - Organisation Certificates
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
  '/organisation/{OrganisationType}/{OrganisationId}/certificate/{OrganisationCertificateType}':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/SoftwareStatementId'
      - $ref: '#/components/parameters/OrganisationCertificateType'
    post:
      summary: Store or create a new certificate of the given OrganisationCertificateType for the given organisation
      tags:
        - Organisation Certificates
      parameters:
        - $ref: '#/components/parameters/OrganisationType'
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/SoftwareStatementId'
        - $ref: '#/components/parameters/OrganisationCertificateType'
      requestBody:
        $ref: '#/components/requestBodies/CertificateOrCSR'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '201':
          $ref: '#/components/responses/CertificateOrKey201CreatedResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    get:
      summary: Get the certificates of the given OrganisationCertificateType for the given oranisation
      tags:
        - Organisation Certificates
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'

  '/organisation/{OrganisationType}/{OrganisationId}/certificate/kid/{CertificateOrKeyId}':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/CertificateOrKeyId'
    get:
      summary: Retrieve a certificate with the given CertificateOrKeyId
      tags:
        - Organisation Certificates
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/CertificateOrKeyGet200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    delete:
      summary: Revoke or remove a certificate with the given CertificateOrKeyId
      tags:
        - Organisation Certificates
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '204':
          $ref: '#/components/responses/204NoContentResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'

  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/SoftwareStatementId'
    get:
      summary: Get certificates for the given software statement
      tags:
        - Software Statement Certificates
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'

  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate/{SoftwareStatementCertificateOrKeyType}':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/SoftwareStatementId'
      - $ref: '#/components/parameters/SoftwareStatementCertificateOrKeyType'
    post:
      summary: Add a key or create a new certificate for the given software statement
      tags:
        - Software Statement Certificates
      parameters:
        - $ref: '#/components/parameters/OrganisationId'
        - $ref: '#/components/parameters/SoftwareStatementId'
      requestBody:
        $ref: '#/components/requestBodies/CSROrKey'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '201':
          $ref: '#/components/responses/CertificateOrKey201CreatedResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    get:
      summary: Get the certificates of the given type for the given software statement
      tags:
        - Software Statement Certificates
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/CertificatesOrKeysGet200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'

  '/organisation/{OrganisationType}/{OrganisationId}/software-statement/{SoftwareStatementId}/certificate/{OrganisationAssociativeCertificateType}/{CertificateOrKeyId}':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/SoftwareStatementId'
      - $ref: '#/components/parameters/OrganisationAssociativeCertificateType'
      - $ref: '#/components/parameters/CertificateOrKeyId'
    put:
      summary: Associate/de-associate a QSEAL/OBSEAL certificate with the given software statement
      tags:
        - Certificate Associations
      requestBody:
        $ref: '#/components/requestBodies/CertificateOrKeyAssociation'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '200':
          $ref: '#/components/responses/CertificateAssociatedWithASoftwareStatement200AcceptedResponse'
        '204':
          $ref: '#/components/responses/204NoContentResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '409':
          $ref: '#/components/responses/409ConflictResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    get:
      summary: Get the certificate of the given type and ID for the given software statement
      tags:
        - Software Statement Certificates
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/CertificateOrKeyGet200OKResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'

  '/organisation/{OrganisationType}/{OrganisationId}/authorisation-server':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
    get:
      summary: Get all Authorisation Servers for the given organisation
      tags:
        - Authorisation Servers
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/AuthorisationServersResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    post:
      summary: Create an Authorisation Server for the given organisation
      tags:
        - Authorisation Servers
      requestBody:
        $ref: '#/components/requestBodies/AuthorisationServer'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '201':
          $ref: '#/components/responses/AuthorisationServerResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
  '/organisation/{OrganisationType}/{OrganisationId}/authorisation-server/{AuthorisationServerId}':
    parameters:
      - $ref: '#/components/parameters/OrganisationType'
      - $ref: '#/components/parameters/OrganisationId'
      - $ref: '#/components/parameters/AuthorisationServerId'
    get:
      summary: Get .well-known entity
      tags:
        - Authorisation Servers
      security:
        - OAuth2SecurityReadOps:
          - ASPSPReadAccess
          - TPPReadAccess
      responses:
        '200':
          $ref: '#/components/responses/AuthorisationServerResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    put:
      summary: Update .well-known entity
      tags:
        - Authorisation Servers
      requestBody:
        $ref: '#/components/requestBodies/AuthorisationServer'
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '202':
          $ref: '#/components/responses/AuthorisationServer202AcceptedResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
    delete:
      summary: Delete an Authorisation Server
      tags:
        - Authorisation Servers
      security:
        - OAuth2SecurityReadWriteOps:
          - ASPSPReadAccess
          - TPPReadAccess
          - TPPModify
      responses:
        '204':
          $ref: '#/components/responses/204NoContentResponse'
        '400':
          $ref: '#/components/responses/400BadRequestResponse'
        '401':
          $ref: '#/components/responses/401UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/404NotFoundResponse'
        '406':
          $ref: '#/components/responses/406NotAcceptableResponse'
        '500':
          $ref: '#/components/responses/500InternalServerErrorResponse'
        '502':
          $ref: '#/components/responses/502BadGatewayResponse'
components:
  parameters:
    AuthorisationServerId:
      name: AuthorisationServerId
      description: The authorisation server Id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/AuthorisationServerIdSchema'
    CertificateOrKeyId:
      name: CertificateOrKeyId
      description: The certificate or key Id
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/CertificateOrKeyIdSchema'
    ContactType:
      name: ContactType
      description: The contact type
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/ContactTypeSchema'
    OrganisationType:
      name: OrganisationType
      description: OB Organisation Type
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/OrganisationTypeSchema'
    OrganisationCertificateType:
      name: OrganisationCertificateType
      description: The certificate type
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/OrganisationCertificateTypeSchema'
    OrganisationAssociativeCertificateType:
      name: OrganisationAssociativeCertificateType
      description: The certificate type that can be associated with a software statement
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/OrganisationAssociativeCertificateTypeSchema'
    OrganisationId:
      name: OrganisationId
      description: The organsation ID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/OrganisationIdSchema'
    SoftwareStatementCertificateOrKeyType:
      name: SoftwareStatementCertificateOrKeyType
      description: The certificate or key type that can be associated with a software statement
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/SoftwareStatementCertificateOrKeyTypeSchema'
    SoftwareStatementId:
      name: SoftwareStatementId
      description: The software statement ID
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/SoftwareStatementIdSchema'
  requestBodies:
    AuthorisationServer:
      description: Properties to create/update authorisation server
      required: true
      content:
        application/vnd.openbanking.directory.authorisationserver-v2+json:
          schema:
            $ref: '#/components/schemas/AuthorisationServerRequestSchema'
    Contact:
      description: Properties to update business/technical contacts
      required: true
      content:
        application/vnd.openbanking.directory.orgcontacts-v2+json:
          schema:
            $ref: '#/components/schemas/ContactSchema'
    CertificateOrCSR:
      description: PEM file -- the contents of the PEM file will differ depending upon *OrganisationCertificateType*. If *OrganisationCertificateType* is set to *qwac*, *qseal* then the PEM file should contain a *QWAC* or a *QSEAL* certificate respectively; if *OrganisationCertificateType* is set to *obwac* or *obseal* then the PEM file should contain a Certificate Signing Request (CSR) for an OB-issued *OBWAC* or *OBSEAL* certificate respectively.
      required: true
      content:
        application/x-pem-file:
          schema:
            $ref: '#/components/schemas/CertificateOrKeySchema'
    CSROrKey:
      description: PEM file -- the contents of the PEM file will differ depending upon *SoftwareStatementCertificateOrKeyType*. If *SoftwareStatementCertificateOrKeyType* is set to *obsigning* or *obtransport* then the PEM file should contain a Certificate Signing Request (CSR) for an OB signing or OB transport certificate respectively; if *SoftwareStatementCertificateOrKeyType* is set to *sigkey*, *enckey* then the PEM file should contain a public signing or encryption key respectively.
      required: true
      content:
        application/x-pem-file:
          schema:
            $ref: '#/components/schemas/CertificateOrKeySchema'
    CertificateOrKeyAssociation:
      description: Certificate or Key Association Payload
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CertificateOrKeyAssociationSchema'
    Enrol:
      description: Properties to enrol an eIDAS QWAC-bearing TPP onto the Open Banking Directory (required fields to be validated)
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EnrolSchema'
    SoftwareStatement:
      description: Software Statement payload
      required: true
      content:
        application/vnd.openbanking.directory.softwarestatement-v2+json:
          schema:
            $ref: '#/components/schemas/SoftwareStatementCreateSchema'
    SoftwareStatementRedirectURI:
      description: Software Statement Redirect URI
      required: true
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/SoftwareStatementRedirectURISchema'
    SoftwareStatementState:
      description: Payload used to deactivate/reactivate a Software Statement
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SoftwareStatementStateSchema'
  responses:
    201CreatedResponse:
      description: Created
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    204NoContentResponse:
      description: No Content
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    400BadRequestResponse:
      description: Bad Request
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    401UnauthorizedResponse:
      description: Unauthorized
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    403ForbiddenResponse:
      description: Forbidden
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    404NotFoundResponse:
      description: Not found
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    406NotAcceptableResponse:
      description: Not Acceptable
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    409ConflictResponse:
      description: Conflict
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    502BadGatewayResponse:
      description: Bad Gateway
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    500InternalServerErrorResponse:
      description: Internal Server Error
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    AuthorisationServerResponse:
      description: OK
      content:
        application/vnd.openbanking.directory.authorisationserver-v2+json:
          schema:
            $ref: '#/components/schemas/AuthorisationServerSchema'
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    AuthorisationServer202AcceptedResponse:
      description: Accepted
      content:
        application/vnd.openbanking.directory.authorisationserver-v2+json:
          schema:
            $ref: '#/components/schemas/AuthorisationServerSchema'
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    AuthorisationServersResponse:
      description: OK
      content:
        application/vnd.openbanking.directory.authorisationserver-list-v2+json:
          schema:
            $ref: '#/components/schemas/AuthorisationServersSchema'
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    CertificatesOrKeysGet200OKResponse:
      description: OK
      content:
        application/jwk-set+json:
          schema:
            $ref: '#/components/schemas/CertificatesOrKeysGetSchema'
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    CertificateOrKeyGet200OKResponse:
      description: OK
      content:
        application/jwk+json:
          schema:
            $ref: '#/components/schemas/CertificateOrKeyGetSchema'
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
    CertificateOrKey201CreatedResponse:
      description: Created
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/jwk+json:
          schema:
            $ref: '#/components/schemas/CertificateOrKeyGetSchema'
    CertificateOrKey202AcceptedResponse:
      description: Accepted
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/jwk+json:
          schema:
            $ref: '#/components/schemas/CertificateOrKeyGetSchema'
    CertificateAssociatedWithASoftwareStatement200AcceptedResponse:
      description: OK
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/jwk+json:
          schema:
            $ref: '#/components/schemas/CertificateOrKeyGetSchema'
    Contact200OKResponse:
      description: OK
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/vnd.openbanking.directory.orgcontacts-v2+json:
          schema:
            $ref: '#/components/schemas/ContactSchema'
    Enrol201CreatedResponse:
      description: Created
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Enrol201CreatedResponseSchema'
    Enrol400BadRequestResponse:
      description: Bad Request
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Enrol400BadRequestResponseSchema'
    OrganisationsGetFromSCIM200OKResponse:
      description: |
        List of the organisation - TODO SCHEMA NEEDS TO BE DEFINED, SOURCED FROM SCIM + OTHER RESPONSE CODES
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/scim+json:
          schema:
            $ref: '#/components/schemas/OrganisationsGetFromSCIM200OKResponseSchema'
    OrganisationGetFromSCIM200OKResponse:
      description: |
        Full details of the organisation - TODO SCHEMA NEEDS TO BE DEFINED, SOURCED FROM SCIM + OTHER RESPONSE CODES
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/scim+json:
          schema:
            $ref: '#/components/schemas/OrganisationGetFromSCIM200OKResponseSchema'
    SoftwareStatementsGet200OKResponse:
      description: OK
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/vnd.openbanking.directory.softwarestatement-list-v2+json:
          schema:
            $ref: '#/components/schemas/SoftwareStatementsSchema'
    SoftwareStatementAssertion200OKResponse:
      description: OK
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/jws+json:
          schema:
            $ref: '#/components/schemas/SoftwareStatementAssertionSchema'
    SoftwareStatement201CreatedResponse:
      description: Created
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/vnd.openbanking.directory.softwarestatement-v2+json:
          schema:
            $ref: '#/components/schemas/SoftwareStatementSchema'
    SoftwareStatementUpdated200OKResponse:
      description: OK
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/vnd.openbanking.directory.softwarestatement-v2+json:
          schema:
            $ref: '#/components/schemas/SoftwareStatementSchema'
    SoftwareStatementGet200OKResponse:
      description: Get the software statements with the given id
      headers:
        OB-Request-Id:
          schema:
            $ref: '#/components/schemas/UniqueRequestIdSchema'
      content:
        application/vnd.openbanking.directory.softwarestatement-v2+json:
          schema:
            $ref: '#/components/schemas/SoftwareStatementSchema'
  schemas:
    AuthorisationServerRequestSchema:
      type: object
      properties:
        AutoRegistrationSupported:
          type: boolean
        BaseApiDNSUri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        CustomerFriendlyDescription:
          description: An RFC-3986-compliant URI
          type: string
          maxLength: 256
        CustomerFriendlyLogoUri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        CustomerFriendlyName:
          type: string
          maxLength: 256
        DeveloperPortalUri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        TermsOfService:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        OpenIDConfigEndPointUri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        PayloadSigningCertLocation:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        EISCDId:
          type: array
          items:
            type: string
            maxLength: 256
        ParentAuthorisationServerId:
          type: string
          maxLength: 22
    AuthorisationServerSchema:
      type: object
      properties:
        Id:
          type: string
          maxLength: 22
        AutoRegistrationSupported:
          type: boolean
        BaseApiDNSUri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        CustomerFriendlyDescription:
          type: string
          maxLength: 256
        CustomerFriendlyLogoUri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        CustomerFriendlyName:
          type: string
          maxLength: 256
        DeveloperPortalUri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        TermsOfService:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        OpenIDConfigEndPointUri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        PayloadSigningCertLocation:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
          maxLength: 256
        EISCDId:
          type: array
          items:
            type: string
            maxLength: 256
        ParentAuthorisationServerId:
          type: string
          maxLength: 22
    AuthorisationServersSchema:
      type: array
      items:
        $ref: '#/components/schemas/AuthorisationServerSchema'
    AuthorisationServerIdSchema:
      type: string
      maxLength: 22
    CertificateOrKeySchema:
      type: string
    CertificateOrKeyIdSchema:
      type: string
      maxLength: 256
    CertificateOrKeyAssociationSchema:
      type: object
      properties:
        associate:
          type: boolean
    CertificatesOrKeysGetSchema:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/CertificateOrKeyGetSchema'
    CertificateOrKeyGetSchema:
      type: object
      properties:
        obOrganisationId:
          description: OB organisation Id
          type: string
        softwareStatementId:
          description: Software Statement Id
          type: string
        status:
          type: string
        expiryDateTime:
          type: string
          format: date-time
        e:
          type: string
        keyType:
          type: string
        kid:
          type: string
        kty:
          type: string
        n:
          type: string
        use:
          type: string
        x5c:
          type: array
          items:
            description: A PKIX certificate [RFC5280]
            type: string
        x5t:
          type: string
        x5t#S256:
          type: string
        x5u:
          type: string
    ContactSchema:
      type: object
      properties:
        EmailAddress:
          type: string
          maxLength: 18
        PhoneNumber:
          type: string
          maxLength: 18
    ContactTypeSchema:
      type: string
      enum:
        - business
        - technical
    EnrolSchema:
      type: object
      properties:
        redirect_uris:
          type: array
          items:
            description: An RFC-3986-compliant URI
            type: string
            format: uri
        token_endpoint_auth_method:
          type: string
        grant_types:
          type: array
          items:
            type: string
        response_types:
          type: array
          items:
            type: string
        client_name:
          type: string
        client_uri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
        logo_uri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
        scope:
          type: string
        contacts:
          type: array
          items:
            type: string
            format: email
        tos_uri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
        policy_uri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
        jwks_uri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
        jwks:
          type: object
        software_id:
          type: string
        software_version:
          type: string
      required:
        - redirect_uris
        - token_endpoint_auth_method
        - grant_types
        - response_types
        - client_name
        - client_uri
        - logo_uri
        - scope
        - contacts
        - tos_uri
        - policy_uri
        - jwks_uri
        - jwks
        - software_id
        - software_version
    Enrol201CreatedResponseSchema:
      description: >-
        A JSON object DCR response returned when client gets created.
      type: object
      properties:
        client_id:
          description: Client ID assigned by Open Banking Directory
          type: string
          minLength: 18
          maxLength: 18
        client_secret:
          description: Client secret generated by Open Banking Directory
          type: string
        client_id_issued_at:
          description: Timestamp
          type: integer
        client_secret_expires_at:
          description: Timestamp
          type: integer
        ob_org_id:
          description: Organisation ID assigned by Open Banking   Directory
          type: string
          minLength: 18
          maxLength: 18
        redirect_uris:
          description: Array of Redirection URI values used by the Client, as supplied by the client
          type: array
          items:
            description: An RFC-3986-compliant URI
            type: string
            format: uri
          minItems: 1
        token_endpoint_auth_method:
          description: client_secret_post
          type: string
        grant_types:
          description: client_credentials
          type: string
        response_types:
          description: client_credentials
          type: string
        scope:
          description: ASPSPFullAccess
          type: string
        client_name:
          description: ORG name ar per eIDAS certificate
          type: string
        client_uri:
          description: An RFC-3986-compliant URI string of a web page providing information about the client
          type: string
          format: uri
        logo_uri:
          description: An RFC-3986-compliant URI
          type: string
          format: uri
        contacts:
          description: Contacts to departments responsible for the client
          type: array
          items:
            description: An RFC-3986-compliant URI
            type: string
            format: uri
          minItems: 1
        tos_uri:
          description: An RFC-3986-compliant URI string that points to a human-readable terms of service document for the client
          type: string
          format: uri
        policy_uri:
          description: An RFC-3986-compliant URI string that points to a human-readable privacy policy document
          type: string
          format: uri
        jwks_uri:
          description: An RFC-3986-compliant URI string referencing the client's JSON Web Key (JWK) Set
          type: string
          format: uri
        jwks:
          description: Client's JSON Web Key Set [RFC7517] document value
          type: object
        software_id:
          description: UUID4 string
          type: string
        software_version:
          description: Client-supplied software version string
          type: string
    Enrol400BadRequestResponseSchema:
      type: object
      properties:
        error:
          description:  Error type
          type: string
          enum:
            - invalid_redirect_uri
            - invalid_client_metadata
            - invalid_software_statement
            - unapproved_software_statement
        error_description:
          description: A more detailed error description
          type: string
    OrganisationCertificateTypeSchema:
      type: string
      enum:
        - qwac
        - qseal
        - obwac
        - obseal
    OrganisationAssociativeCertificateTypeSchema:
      type: string
      enum:
        - qseal
        - obseal
    OrganisationTypeSchema:
      type: string
      enum:
        - aspsp
        - tpp
    OrganisationIdSchema:
      type: string
    OrganisationsGetFromSCIM200OKResponseSchema:
      type: array
      items:
        type: object
    OrganisationGetFromSCIM200OKResponseSchema:
      type: object
    SoftwareStatementCertificateOrKeyTypeSchema:
      type: string
      enum:
        - obtransport
        - obsigning
        - sigkey
        - enckey
    SoftwareStatementCreateSchema:
      type: object
      properties:
        ClientName:
          type: string
          description: Software Statement client name
          maxLength: 40
        Description:
          type: string
          description: Software Statement description
          maxLength: 256
        OnBehalfOfObOrganisation:
          type: string
          description: A reference to fourth party organisation resource on the OB Directory if the registering TPP is acting on behalf of another
          maxLength: 40
        PolicyUri:
          type: string
          format: uri
          description: The Software Statement RFC-3986-compliant policy URI
          maxLength: 256
        ClientUri:
          type: string
          format: uri
          description: The Software Statement RFC-3986-compliant client URI
          maxLength: 256
        LogoUri:
          type: string
          format: uri
          description: The Software Statement RFC-3986-compliant logo URI
          maxLength: 256
        RedirectUri:
          type: array
          items:
            description: An RFC-3986-compliant URI
            type: string
            format: uri
            maxLength: 256
          description: The Software Statement redirect URIs
        Roles:
          type: array
          items:
            type: string
            maxLength: 256
          description: The list of Software Statement roles
        TermsOfServiceUri:
          type: string
          format: uri
          description: The Software Statement terms of service RFC-3986-compliant URI
          maxLength: 256
        Version:
          type: number
          description: Software Statement version as provided by the organisation's PTC
    SoftwareStatementSchema:
      type: object
      properties:
        Active:
          type: boolean
          description: Software Statement active/inactive flag
        ClientId:
          type: string
          description: Software Statement client Id
          maxLength: 22
        ClientName:
          type: string
          description: Software Statement client name
          maxLength: 40
        Description:
          type: string
          description: Software Statement description
          maxLength: 256
        Id:
          $ref: '#/components/schemas/SoftwareStatementIdSchema'
        Mode:
          type: string
          enum:
            - Live
            - Not Live
          description: Software Statement mode
          maxLength: 8
        ObClientCreated:
          type: boolean
          description: Client created flag
        OnBehalfOfObOrganisation:
          type: string
          description: A reference to fourth party organisation resource on the OB Directory if the registering TPP is acting on behalf of another
          maxLength: 40
        PolicyUri:
          type: string
          format: uri
          description: The Software Statement policy RFC-3986-compliant URI
          maxLength: 256
        ClientUri:
          type: string
          format: uri
          description: The Software Statement client RFC-3986-compliant URI
          maxLength: 256
        LogoUri:
          type: string
          format: uri
          description: The Software Statement logo RFC-3986-compliant URI
          maxLength: 256
        RedirectUri:
          type: array
          items:
            type: string
            format: uri
          description: The Software Statement redirect RFC-3986-compliant URI
          maxLength: 256
        Roles:
          type: array
          items:
            type: string
            maxLength: 256
          description: The list of Software Statement roles
        SigningKeyIds:
          type: array
          items:
            type: string
          description: The list of signing certificate Ids
        TermsOfServiceUri:
          type: string
          format: uri
          description: The Software Statement terms of service RFC-3986-compliant URI
          maxLength: 256
        TransportKeyIds:
          type: array
          items:
            type: string
          description: The list of transport certificate Ids
        Version:
          type: number
          description: Software Statement version as provided by the organisation's PTC
    SoftwareStatementAssertionSchema:
      type: string
      description: A signed JWT (JWS)
    SoftwareStatementsSchema:
      type: array
      items:
        $ref: '#/components/schemas/SoftwareStatementSchema'
      description: The list of Software Statements
    SoftwareStatementIdSchema:
      type: string
      description: Software Statement Id
      maxLength: 22
    SoftwareStatementStateSchema:
      type: object
      properties:
        Active:
          type: boolean
          enum:
            - true
            - false
      description: Software Statement State
    SoftwareStatementRedirectURISchema:
      description: Array of Redirection RFC-3986-compliant URI values used by the Client, as supplied by the client
      type: array
      items:
        type: string
        format: uri
        minItems: 1
    UniqueRequestIdSchema:
      type: string
      description: Unique Request Id. Give it to the Support Desk if you eve need help with a request that does not work the way you expected.
  securitySchemes:
    OAuth2SecurityReadOps:
      description: This API uses OAuth 2 with the client credentials grant flow
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://sso.openbanking.me.uk/as/token.oauth2
          scopes:
            TPPReadAccess: Retrieve or Search for Third Party Providers
            ASPSPReadAccess: Read ASPSP Records
    OAuth2SecurityReadWriteOps:
      description: This API uses OAuth 2 with the client credentials grant flow
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://sso.openbanking.me.uk/as/token.oauth2
          scopes:
            TPPReadAccess: Retrieve or Search for Third Party Providers
            TPPModify: Modify Your Third Third Party Provider Record
            ASPSPReadAccess: Read ASPSP Records
